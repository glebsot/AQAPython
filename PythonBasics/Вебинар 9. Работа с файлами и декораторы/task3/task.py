# Дана функция get_kinetic_energy, которая вычисляет кинетическую энергию. В ней ничего изменять не нужно! Напишите
# декоратор memorize, который организует механизм кэширования данной функции. Декоратор должен сохранять информацию о
# вызове функции в словарь, в котором ключ - это аргументы, с которыми была вызвана функция, а значение - это
# результат выполнения функции. Если функция с такими аргументами вызывается впервые, то в словарь добавляется
# информация об этом вызове. Если функция с такими аргументами уже вызывалась, то новое значение в словарь не
# добавляется.
#
# Входные данные:
# число weight типа int - масса
# число speed типа int - скорость

# Выходные данные:
# кортеж типа tuple из двух элементов: результат вычисления кинетической энергии и словарь с информацией о вызовах
# функции

def memorize(function):
    # todo Здесь нужно написать код
    cache = {}  # создаём словарь для хранения ключей и значений

    def wrapper(weight, speed):  # создаем функцию, которая улучшает существующую функцию get_kinetic_energy
        key = (weight, speed)  # ключ, это кортеж полученный на входе
        if key in cache:  # если ключ уже есть в кэше, то мы вернем значение и сам словарь
            return cache[key], cache

        result = function(weight, speed)
        # если в кэше нет, то получаем результат и присваиваем ключу значение
        cache[key] = result
        return result, cache
    return wrapper


# todo Здесь ничего изменять не нужно!
@memorize
def get_kinetic_energy(weight, speed):
    """Кинетическая энергия
    :param weight: масса
    :param speed: скорость
    :return: кинетическую энергию
    """
    return (weight * speed ** 2)/2

